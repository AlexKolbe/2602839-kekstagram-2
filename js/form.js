/**
 * TODO
 * Задача
 * TODO Добавить в проект валидацию, проверки введённых данных, чтобы подсказать пользователю, какие данные мы от него ждём, а себе и бэкендеру упростить работу с этими данными.
 *
 * TODO  Заведите модуль, который будет отвечать за работу с формой.
 *
 * * СДЕЛАНО  Пропишите тегу <form> правильные значения атрибутов method и enctype и адрес action для отправки формы на сервер.
 * ! Обратите внимание. В разделе про работу с сетью мы доработаем механизм отправки данных, а пока достаточно правильных атрибутов у тега <form>.
 *
 * *      Если форма заполнена верно, то после отправки покажется страница сервера (по адресу из атрибута action тега form) с успешно отправленными данными. Если же форма пропустила какие-то некорректные значения, то будет показана страница с допущенными ошибками. В идеале у пользователя не должно быть сценария, при котором он может отправить некорректную форму.
 *
 * TODO  Изучите, что значит загрузка изображения, и как, когда и каким образом показывается форма редактирования изображения. Напишите код и добавьте необходимые обработчики для реализации этого пункта техзадания. В работе вы можете опираться на код показа окна с полноразмерной фотографией, который вы, возможно, уже написали в предыдущей домашней работе.
 *
 * ? Что изучить? Какая форма редактирования? Что за редактирование? Что редактировать? Как редактировать?
 *
 * !      Важно. Подстановка выбранного изображения в форму — это отдельная домашняя работа. В данном задании этот пункт реализовывать не нужно.
 *
 * TODO  После реализуйте закрытие формы.
 * ? Снова форма! Скорее всего форма куда мы прописываем ACTION
 *
 * TODO      Обратите внимание, что при закрытии формы дополнительно необходимо сбрасывать значение поля выбора файла .img-upload__input. В принципе, всё будет работать, если при повторной попытке загрузить в поле другую фотографию. Но! Событие change не сработает, если пользователь попробует загрузить ту же фотографию, а значит окно с формой не отобразится, что будет нарушением техзадания. Значение других полей формы также нужно сбрасывать.
 * ? Снова форма. Подумать про сбросы полей формы.
 *
 * TODO  Напишите код для валидации формы добавления изображения, используя библиотеку Pristine (скрипт находится в директории /vendor/pristine). Список полей для валидации:
        Хэштеги
        Комментарий
 * ? PRISTINE. На до проверять Хэштеги и комментарии. То есть когда мы добавляем (как?) изображение, надо проверить (что? как?) Хэштеги и Комментарии. Какие Хэштеги? Какие комментарии?
 *
 * TODO  Реализуйте логику проверки так, чтобы, как минимум, она срабатывала при попытке отправить форму и не давала этого сделать, если форма заполнена не по правилам. При желании, реализуйте проверки сразу при вводе значения в поле.
 *
 * ? Тут видимо что-то про изменение прямо при вводе или при отправке.
 *
 * TODO Как отменить обработчик Esc при фокусе?
 *
 * ? То есть при нажатии Esc  нужно какой-то обработчик отменять? Какой?
 *
* ? Задача не имеет одного верного решения, однако намекнём на самый простой — использовать stopPropagation для события нажатия клавиш в поле при фокусе.

* TODO Валидация хеш-тегов?
*
* ? Для валидации хэштегов вам придётся вспомнить, как работать с массивами. Набор хэштегов можно превратить в массив, воспользовавшись методом .split(). Он разбивает строки на массивы. После этого, вы можете написать цикл, который будет ходить по полученному массиву и проверять каждый из хэштегов на предмет соответствия ограничениям. Если хотя бы один из тегов не проходит нужных проверок, показывать сообщение об ошибке.
*
* ? А куда вставляется этот ХЭШТЕГ? Как это блин выглядит?
* Поля, не перечисленные в техзадании, но существующие в разметке, особой валидации не требуют.
* ? То есть надо смотреть разметку в индексе
*/

/**
 * TODO Функция проверки форм
 * TODO Проверка чего хэштегов
 * TODO Проверка комментариев
 * * ВЫПОЛНЕНО: Модалка открывается и закрывается
 */

import './validate.js';
import { EscKey } from './utils.js';

// Находим форму и необходимые элементы
const form = document.querySelector('.img-upload__form');
const overlay = document.querySelector('.img-upload__overlay');
const cancelButton = document.querySelector('.img-upload__cancel');
const fileInput = document.querySelector('.img-upload__input');
//const hashtagInput = document.querySelector('.text__hashtags');
//const commentInput = document.querySelector('.text__description');

// Создаём экземпляр Pristine для валидации
const pristine = new Pristine(form, {
  classTo: 'img-upload__field-wrapper',
  errorTextParent: 'img-upload__field-wrapper',
  errorTextClass: 'img-upload__error-text'
});

// Функция открытия модального окна
const openModal = () => {
  overlay.classList.remove('hidden');
  document.body.classList.add('modal-open');
  document.addEventListener('keydown', onDocumentKeydown);
};

// Функция закрытия модального окна
const closeModal = () => {
  form.reset(); // Сбрасываем значения полей формы
  pristine.reset(); // Сбрасываем ошибки валидации
  overlay.classList.add('hidden');
  document.body.classList.remove('modal-open');
  document.removeEventListener('keydown', onDocumentKeydown);
};

/**
 * Обработчик нажатия клавиши Esc для закрытия модального окна
 * @param {Event} evt - Событие клавиатуры
 */
function onDocumentKeydown(evt) {
  if (EscKey(evt)) {
    evt.preventDefault();
    closeModal();
  }
}

/**
 * Обработчик клика по кнопке закрытия модального окна
 */
cancelButton.addEventListener('click', () => {
  closeModal();
});

// Обработчик клика вне модального окна
overlay.addEventListener('click', (evt) => {
  if (evt.target === overlay) {
    closeModal();
  }
});


// Обработчик выбора файла
fileInput.addEventListener('change', () => {
  openModal();
});


